pipeline {
    agent any 
    tools {
        jdk 'jdk'
        nodejs 'nodejs'
    }
    environment  {
        SCANNER_HOME=tool 'sonar-scanner'
    }
    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout from Git') {
            steps {
                git branch: 'master', url: 'https://github.com/Mohamedsalman13/crudapp.git'
            }
        }
        stage('Sonarqube Analysis') {
            steps {
                    withSonarQubeEnv('sonar-server') {
                        sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Crudapp \
                        -Dsonar.projectKey=Crudapp '''
                    }
                
            }
        }
        stage('Quality Check') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token' 
                }
            }
        }
        stage('Installing Dependencies') {
            steps {
                    sh 'npm install'
                
            }
        }
        stage('OWASP Dependency-Check Scan') {
            steps {
                    dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
                    dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
                
            }
        }
        stage('Trivy File Scan') {
            steps {
                    sh 'trivy fs . > trivyfs.txt'
                
            }
        }
        stage("Docker Image Build") {
            steps {
                script {
                        withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {   
                            sh 'docker system prune -f'
                            sh 'docker container prune -f'
                            sh 'docker build -t crudapp .'
                        }
                    
                }
            }
        }
        stage("Docker Image Pushing") {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {   
                        sh 'docker tag crudapp spacemax/crudapp:latest'
                        sh 'docker push spacemax/crudapp:latest'
                    }
                }
            }
        }
        stage("TRIVY Image Scan") {
            steps {
                sh 'trivy image spacemax/crudapp:latest > trivyimage.txt' 
            }
        }

      stage('Deploy to Kubernetes') {
    steps {
        script {
            try {
                withAWS(credentials: 'aws-key', region: 'ap-south-1') {
                    withKubeConfig(credentialsId: 'kubernetes', region: 'ap-south-1') {
                        sh 'kubectl apply -f deployment-service.yaml'
                    }
                }
            } catch (Exception e) {
                echo "Failed to deploy to Kubernetes: ${e.message}"
                currentBuild.result = 'FAILURE'
            }
        }
    }
}

                }
            }
        
    
